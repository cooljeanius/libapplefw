# libapplefw/.github/workflows/codeql.yml: GitHub Actions codeql workflow for libapplefw
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]
  schedule:
    - cron: '18 23 * * 4'

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'c-cpp' ]
        # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
        # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at:
        # https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to:
        # https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Extra coverage build
      if: success()
      run: |
        if test -r Makefile; then (make check && make distcheck); fi
        # shellcheck disable=SC2001,SC2235
        for subdir in example include src src/lzfse tools; do \
          if test -e "${subdir}/Makefile" && test -n "$(ls "${subdir}"/*.c 2>/dev/null)"; then \
            pushd "${subdir}"; \
            for srcfile in *.c; do \
              echo "attempting to use $(which make) to compile ${srcfile} in ${subdir}"; \
              make "$(echo "${srcfile}" | sed "s/\.c/.o/g")" V=0 CFLAGS="-w" || stat -t "${srcfile}"; \
            done; \
            popd; \
          elif test -d "${subdir}" && test ! -e "${subdir}/Makefile" && (test -r "${subdir}/Makefile.in" || test -r "${subdir}/Makefile.am"); then \
            echo "no unsuffixed Makefile in ${subdir}, but there are these ones with suffixes:"; \
            ls ${subdir}/Makefile* || echo "... $(ls ${subdir}/Makefile*)"; \
          else \
            echo "skipping attempting to build additional objfiles in ${subdir}"; \
          fi; \
        done
        (time (find . -name '*.o' -exec cp -v {} . ";")) || echo "failed copying an object file"
        FINAL_CPPFLAGS="-I."
        for myincdir in .. include ../include include/applefw src/lzfse; do \
          if test -d "${myincdir}" && test -r "${myincdir}" && test -n "$(ls "${myincdir}"/*.h 2>/dev/null)"; then \
            FINAL_CPPFLAGS="${FINAL_CPPFLAGS} -I${myincdir} -iquote ${myincdir}"; \
          fi; \
        done
        echo "FINAL_CPPFLAGS are ${FINAL_CPPFLAGS}"
        # shellcheck disable=SC2001,SC2044
        for cfile in $(find . -name '*.c' -type f); do \
          cobjfile="$(echo "${cfile}" | sed "s/\.c/.o/g")"; \
          if test ! -e "${cobjfile}"; then \
            echo "gcc -c -w \"${FINAL_CPPFLAGS}\" \"${cfile}\""; \
            gcc -c -w "${FINAL_CPPFLAGS}" "${cfile}" || stat -t "${cfile}" || echo "cfile is ${cfile}"; \
          else \
            echo "object file ${cobjfile} already exists for ${cfile}."; \
            cp -v "${cobjfile}" "$(dirname "${cfile}")" || cp -v "${cobjfile}" . || cp -v "${cobjfile}" .. || (if test -d /tmp && test -w /tmp; then cp -v "${cobjfile}" /tmp; fi) || stat -t "${cobjfile}"; \
          fi; \
        done

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
